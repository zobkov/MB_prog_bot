"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–∑ CSV —Ñ–∞–π–ª–∞

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ dry-run —Ä–µ–∂–∏–º–∞
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
- –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞
- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
- –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
"""

import asyncio
import csv
import logging
from typing import List, Dict, Any
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

from config.config import load_config


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class BroadcastScript:
    def __init__(self, csv_file_path: str = "broadcast.csv"):
        self.csv_file_path = csv_file_path
        self.config = load_config()
        self.bot = None
        
        # –ú–∞–ø–ø–∏–Ω–≥ –ø–∞–∫–µ—Ç–æ–≤
        self.package_mapping = {
            1: "–î–µ–ª–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ‚Äì 2 990 —Ä—É–±.",
            2: "–ì–∞–ª–∞-—É–∂–∏–Ω ‚Äì 3 490 —Ä—É–±.",
            3: "–î–µ–ª–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ & –≥–∞–ª–∞-—É–∂–∏–Ω ‚Äì 5 990 —Ä—É–±."
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–∞–∫–µ—Ç–æ–≤
        self.package_additional_info = {
            1: "\n‚ùó –ú—ã —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç —É—á–∞—Å—Ç–∏—è –∑–∞ 6 490 —Ä—É–±–ª–µ–π. –¢–∞–∫ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –¥–µ–ª–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É 3-–≥–æ –¥–Ω—è, –Ω–æ –∏ –≥–∞–ª–∞-—É–∂–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é.",
            2: "\n‚ùó –ú—ã —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç —É—á–∞—Å—Ç–∏—è –∑–∞ 6 490 —Ä—É–±–ª–µ–π. –¢–∞–∫ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –≥–∞–ª–∞-—É–∂–∏–Ω, –Ω–æ –∏ –¥–µ–ª–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É 3-–≥–æ –¥–Ω—è.",
            3: ""  # –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç
        }
        
        # –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        self.message_template = """–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! 

‚ú®–ú—ã –≥–æ—Ç–æ–≤—ã –æ–±—ä—è–≤–∏—Ç—å –æ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–¥–∞–∂ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –¥–µ–ª–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –≥–∞–ª–∞ —É–∂–∏–Ω. 

–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç —É—á–∞—Å—Ç–∏—è: {package_name}{package_additional_info}


–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏ —Å—É–º–º—É —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ +7 (960) 259 88-47 –Ω–∞ –ê–ª—å—Ñ–∞-–±–∞–Ω–∫ (–î–º–∏—Ç—Ä–∏–π –ö.). 

–í —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ –±–æ—Ç–µ –ø—Ä–∏–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞: –Ω–µ –æ—Ç–∫–ª—é—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!

–ñ–¥–µ–º —Ç–µ–±—è –Ω–∞ –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–µ –ë—É–¥—É—â–µ–≥–æ '25!"""

        # –¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ß—Ç–æ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ?"
        self.program_info_text = """<b>–¢—Ä–µ—Ç–∏–π –¥–µ–Ω—å –ú–ë: –±—É—Å—Ç –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è</b>

–≠—Ç–æ—Ç —Ç—Ä–µ–∫ –º—ã –ø–æ—Å–≤—è—â–∞–µ–º –≤–∞–º ‚Äî –≤—ã–ø—É—Å–∫–Ω–∏–∫–∞–º, —á—Ç–æ —Å—Ç—Ä–æ—è—Ç –±—É–¥—É—â–µ–µ –≤ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–µ. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞—Å—ã—â–µ–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–æ–π –∏ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–æ–º, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤–∞–º –º–∞–∫—Å–∏–º—É–º –ø–æ–ª–µ–∑–Ω–æ–≥–æ –¥–ª—è –∫–∞—Ä—å–µ—Ä—ã.

üéØ <b>–î–µ–ª–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>

<b>12:00‚Äì13:20 | –ò–≥—Ä–∞-–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤ –ø–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –≤ –∫–æ–º–∞–Ω–¥–µ</b>
–†–∞–∑–±–µ—Ä—ë–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—â–µ–Ω–∏—è –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥–µ –≤ –ª—ë–≥–∫–æ–º –∏–≥—Ä–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –í—ã –æ—Ç–∫—Ä–æ–µ—Ç–µ –¥–ª—è —Å–µ–±—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–ª–ª–µ–≥ –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –æ–±—â–∏—Ö —Ü–µ–ª–µ–π –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞. –ü–æ–≥—Ä—É–∑–∏–º—Å—è –≤ –∂–∏–≤—ã–µ –∫–µ–π—Å—ã –∏ –Ω–∞–π–¥—ë–º —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.

<b>14:30‚Äì15:10 | –í–æ—Ä–∫—à–æ–ø –ø–æ —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏</b>
–ù–∞—É—á–∏–º—Å—è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ —Å–µ–±–µ —Ç–∞–∫, —á—Ç–æ–±—ã –≤–∞—Å –∑–∞–ø–æ–º–∏–Ω–∞–ª–∏ ‚Äî –∏ –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞, –∏ –∫–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å. –í—ã –æ—Å–≤–æ–∏—Ç–µ 3 –ø–æ–¥—Ö–æ–¥–∞ –∏ —Å–æ–∑–¥–∞–¥–∏—Ç–µ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π: —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ, –∫–∞—Ä—å–µ—Ä–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ. –£–∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ –¥–µ—Ä–∂–∞—Ç—å—Å—è –ø–µ—Ä–µ–¥ –ª—é–±–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π.

<b>15:10‚Äì15:30 | –ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –±—ã—Å—Ç—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á</b>
–î–∏–Ω–∞–º–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –æ—Ç —Å—Ç–æ–ª–∞ –∫ —Å—Ç–æ–ª—É, –æ–±–º–µ–Ω–æ–º –º–Ω–µ–Ω–∏–π –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º –∏ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –¥–∏–∞–ª–æ–≥–∞–º–∏. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä—É–≥ –ø–æ–ª–µ–∑–Ω—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏.

üë©‚Äçüè´ <b>–°–ø–∏–∫–µ—Ä—ã –∏ —Ñ–∞—Å–∏–ª–∏—Ç–∞—Ç–æ—Ä—ã:</b>

–ö–∞—Ç—è –ú–∏—Ç—É—Å–æ–≤–∞ ‚Äî –õ–∏–¥–µ—Ä Women in Tech Russia, ex-Google, ex-Wrike, Platinum Tier Facilitator #IamRemarkable

–û–ª—è –ß–∞–¥—É–ª–∏–Ω–∞ ‚Äî HR –≤ IT, ex-Raiffeisenbank, –∫–∞—Ä—å–µ—Ä–Ω—ã–π –º–µ–Ω—Ç–æ—Ä –∏ –∫–æ—É—á ICF, –∞–≤—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ ¬´–í—Å—ë —Ç—ã –º–æ–∂–µ—à—å¬ª

–õ–µ–Ω–∞ –°–æ–∫–æ–ª–æ–≤–∞ ‚Äî Product Owner –≤ EdTech, ex-–ù–µ—Ç–æ–ª–æ–≥–∏—è, ex-–Ø–Ω–¥–µ–∫—Å –ü—Ä–∞–∫—Ç–∏–∫—É–º, –∞–≤—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ–¥–∫–∞—Å—Ç–∞ ¬´–ö–∞—Ä—å–µ—Ä–∞ –±–µ–∑ –±–∞–≥–æ–≤¬ª, —Å–æ–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ ¬´–ï—â—ë –Ω–µ –ø—Ä–æ–¥–∞–∫—Ç—ã¬ª

‚ú® <b>–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –±—ã—Ç—å?</b>

–§–∏–Ω–∞–ª—å–Ω—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ –≤–∞—à–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–∫–∞—á–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏, –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –∏–Ω—Å–∞–π—Ç—ã –∏ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å —Ç–µ–º–∏, –∫—Ç–æ —Ä–∞–∑–¥–µ–ª—è–µ—Ç –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –±—É–¥—É—â–µ–º—É –≤ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–µ.

<b>–ñ–¥—ë–º –∏–º–µ–Ω–Ω–æ –≤–∞—Å, –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∏ –í—ã—Å—à–µ–π –®–∫–æ–ª—ã –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞!</b>"""

    async def initialize_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.bot = Bot(
            token=self.config.bot.token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )

    async def close_bot(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞"""
        if self.bot:
            await self.bot.session.close()

    def read_csv_data(self) -> List[Dict[str, Any]]:
        """–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        users = []
        try:
            with open(self.csv_file_path, 'r', encoding='utf-8') as file:
                reader = csv.DictReader(file)
                for row in reader:
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—á–∞—Ç–∫—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ (pacakage -> package)
                    if 'pacakage' in row:
                        row['package'] = row['pacakage']
                    
                    users.append({
                        'id': int(row['id']),
                        'telegram_id': int(row['telegram_id']),
                        'username': row.get('username', ''),
                        'package': int(row['package'])
                    })
        except FileNotFoundError:
            logger.error(f"CSV —Ñ–∞–π–ª {self.csv_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞: {e}")
            return []
        
        return users

    def create_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ß—Ç–æ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ?", callback_data="program_info")],
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="confirm_payment")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è", callback_data="decline_participation")]
        ])
        return keyboard

    def format_message(self, package_id: int) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        package_name = self.package_mapping.get(package_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç")
        package_additional_info = self.package_additional_info.get(package_id, "")
        
        return self.message_template.format(
            package_name=package_name,
            package_additional_info=package_additional_info
        )

    def display_preview(self, users: List[Dict[str, Any]]):
        """–ü–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é —Ä–∞—Å—Å—ã–ª–∫–∏"""
        print("\n" + "="*80)
        print("–ü–†–ï–í–¨–Æ –†–ê–°–°–´–õ–ö–ò")
        print("="*80)
        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}")
        print()
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–∞–∫–µ—Ç–∞–º
        package_stats = {}
        for user in users:
            package = user['package']
            if package not in package_stats:
                package_stats[package] = 0
            package_stats[package] += 1
        
        print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞–∫–µ—Ç–∞–º:")
        for package_id, count in package_stats.items():
            package_name = self.package_mapping.get(package_id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç {package_id}")
            print(f"  {package_name}: {count} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
        
        print("\n–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø–∞–∫–µ—Ç–∞:")
        print("-" * 80)
        
        for package_id in sorted(package_stats.keys()):
            print(f"\n–ü–ê–ö–ï–¢ {package_id}: {self.package_mapping.get(package_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}")
            print("-" * 50)
            print(self.format_message(package_id))
            print()

    async def send_message_to_user(self, user: Dict[str, Any], dry_run: bool = True) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            message_text = self.format_message(user['package'])
            keyboard = self.create_keyboard()
            
            if dry_run:
                print(f"[DRY RUN] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']} (@{user['username']})")
                return True
            else:
                await self.bot.send_message(
                    chat_id=user['telegram_id'],
                    text=message_text,
                    reply_markup=keyboard
                )
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']} (@{user['username']})")
                return True
                
        except TelegramForbiddenError:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['telegram_id']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            return False
        except TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")
            return False

    async def run_broadcast(self, dry_run: bool = True):
        """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...")
        
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV
        users = self.read_csv_data()
        if not users:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CSV —Ñ–∞–π–ª.")
            return
        
        # –ü–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é
        self.display_preview(users)
        
        if dry_run:
            print("\nüîç –†–ï–ñ–ò–ú DRY RUN - —Å–æ–æ–±—â–µ–Ω–∏—è –ù–ï –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            print("–î–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --send")
        else:
            print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –ù–ê–°–¢–û–Ø–©–ê–Ø –†–ê–°–°–´–õ–ö–ê!")
            print("–°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ —Å–ø–∏—Å–∫–∞.")
            
            confirmation = input("\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ '–î–ê' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è): ")
            if confirmation.upper() != '–î–ê':
                print("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
            await self.initialize_bot()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        successful_sends = 0
        failed_sends = 0
        
        print(f"\nüì§ –ù–∞—á–∏–Ω–∞–µ–º {'—Å–∏–º—É–ª—è—Ü–∏—é' if dry_run else '–æ—Ç–ø—Ä–∞–≤–∫—É'} —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        for i, user in enumerate(users, 1):
            print(f"[{i}/{len(users)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['telegram_id']}...")
            
            success = await self.send_message_to_user(user, dry_run)
            
            if success:
                successful_sends += 1
            else:
                failed_sends += 1
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)
            if not dry_run:
                await asyncio.sleep(0.1)  # 100ms –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "="*80)
        print("–ò–¢–û–ì–ò –†–ê–°–°–´–õ–ö–ò" if not dry_run else "–ò–¢–û–ì–ò –°–ò–ú–£–õ–Ø–¶–ò–ò")
        print("="*80)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ {'–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if not dry_run else '–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ'}: {successful_sends}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {failed_sends}")
        print(f"üìä –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_sends / len(users) * 100):.1f}%")
        
        if not dry_run:
            await self.close_bot()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    import sys
    import argparse
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description='–°–∫—Ä–∏–ø—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π')
    parser.add_argument('--send', action='store_true', help='–†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é dry-run)')
    parser.add_argument('--csv', type=str, default='broadcast.csv', help='–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é broadcast.csv)')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast = BroadcastScript(csv_file_path=args.csv)
    await broadcast.run_broadcast(dry_run=not args.send)


if __name__ == "__main__":
    asyncio.run(main())