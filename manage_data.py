#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –±–æ—Ç–∞ MB25
"""
import asyncio
import sys
from config.config import load_config
from bot.database import Database, UserRepository
from sqlalchemy import select, func


async def show_all_users():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    config = load_config()
    database = Database(config)
    user_repo = UserRepository(database)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        session = await database.get_session()
        try:
            from bot.models import User
            result = await session.execute(select(User).order_by(User.created_at.desc()))
            users = result.scalars().all()
            
            if not users:
                print("üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"üìä –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            print("=" * 80)
            
            for user in users:
                print(f"üë§ ID: {user.id}")
                print(f"   Telegram ID: {user.telegram_id}")
                username_display = f"@{user.username}" if user.username else "–ù–µ—Ç username"
                print(f"   Username: {username_display}")
                print(f"   –ò–º—è: {user.first_name} {user.last_name}")
                print(f"   –ü–∞–∫–µ—Ç: {user.package_type}")
                print(f"   –£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ú–ë —Ä–∞–Ω–µ–µ: {'–î–∞' if user.participated_before else '–ù–µ—Ç'}")
                if user.participated_before and user.participation_year:
                    print(f"   –ì–æ–¥ —É—á–∞—Å—Ç–∏—è: {user.participation_year}")
                print(f"   –í—ã–ø—É—Å–∫–Ω–∏–∫ –í–®–ú: {'–î–∞' if user.is_vsm_graduate else '–ù–µ—Ç'}")
                if user.is_vsm_graduate and user.graduation_year:
                    print(f"   –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {user.graduation_year}")
                print(f"   –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at}")
                print("-" * 40)
        finally:
            await session.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    finally:
        await database.close()


async def show_statistics():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π"""
    config = load_config()
    database = Database(config)
    
    try:
        session = await database.get_session()
        try:
            from bot.models import User
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_users = await session.execute(select(func.count(User.id)))
            total_count = total_users.scalar()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞–∫–µ—Ç–∞–º
            business_count_result = await session.execute(
                select(func.count(User.id)).where(User.package_type == 'business')
            )
            business_count = business_count_result.scalar()
            
            gala_count_result = await session.execute(
                select(func.count(User.id)).where(User.package_type == 'gala')
            )
            gala_count = gala_count_result.scalar()
            
            full_count_result = await session.execute(
                select(func.count(User.id)).where(User.package_type == 'full')
            )
            full_count = full_count_result.scalar()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—á–∞—Å—Ç–∏—é –≤ –ú–ë
            participated_before_result = await session.execute(
                select(func.count(User.id)).where(User.participated_before == True)
            )
            participated_before_count = participated_before_result.scalar()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–ø—É—Å–∫–Ω–∏–∫–∞–º –í–®–ú
            vsm_graduates_result = await session.execute(
                select(func.count(User.id)).where(User.is_vsm_graduate == True)
            )
            vsm_graduates_count = vsm_graduates_result.scalar()
            
            print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ô")
            print("=" * 50)
            print(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_count}")
            print("\nüì¶ –ü–æ –ø–∞–∫–µ—Ç–∞–º:")
            print(f"  ‚Ä¢ –î–µ–ª–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: {business_count}")
            print(f"  ‚Ä¢ –ì–∞–ª–∞-—É–∂–∏–Ω: {gala_count}")
            print(f"  ‚Ä¢ –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç: {full_count}")
            print(f"\nüéì –£—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –ú–ë —Ä–∞–Ω–µ–µ: {participated_before_count}")
            print(f"üè´ –í—ã–ø—É—Å–∫–Ω–∏–∫–∏ –í–®–ú: {vsm_graduates_count}")
            
        finally:
            await session.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    finally:
        await database.close()


async def clear_all_users():
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    config = load_config()
    database = Database(config)
    
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
    confirm = input("–í–≤–µ–¥–∏—Ç–µ 'YES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
    
    if confirm != 'YES':
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    try:
        session = await database.get_session()
        try:
            from bot.models import User
            await session.execute(User.__table__.delete())
            await session.commit()
            print("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
        finally:
            await session.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    finally:
        await database.close()


def print_help():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    print("ü§ñ MB25 Bot Data Manager")
    print("=" * 30)
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("  users     - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("  stats     - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print("  clear     - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("  help      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")


async def main():
    if len(sys.argv) < 2:
        print_help()
        return
    
    command = sys.argv[1].lower()
    
    if command == 'users':
        await show_all_users()
    elif command == 'stats':
        await show_statistics()
    elif command == 'clear':
        await clear_all_users()
    elif command == 'help':
        print_help()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print_help()


if __name__ == "__main__":
    asyncio.run(main())