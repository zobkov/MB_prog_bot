import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.redis import RedisStorage, DefaultKeyBuilder
from aiogram_dialog import setup_dialogs
from redis.asyncio import Redis

from config.config import load_config
from bot.handlers import router
from bot.dialogs import registration_dialog
from bot.database import Database, UserRepository


async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Redis –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è FSM
    if config.redis.password:
        redis_client = Redis.from_url(f"redis://:{config.redis.password}@{config.redis.host}:{config.redis.port}/0")
    else:
        redis_client = Redis.from_url(f"redis://{config.redis.host}:{config.redis.port}/0")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
    try:
        await redis_client.ping()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {config.redis.host}:{config.redis.port}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è FSM
    storage = RedisStorage(
        redis=redis_client,
        key_builder=DefaultKeyBuilder(with_bot_id=True, with_destiny=True)
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(
        token=config.bot.token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = Dispatcher(storage=storage)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database = Database(config)
    await database.create_tables()
    user_repo = UserRepository(database)
    
    # Middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ database –∏ user_repo
    async def database_middleware(handler, event, data):
        data["database"] = database
        data["user_repo"] = user_repo
        return await handler(event, data)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
    dp.message.middleware(database_middleware)
    dp.callback_query.middleware(database_middleware)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏ –¥–∏–∞–ª–æ–≥–æ–≤
    dp.include_router(router)
    dp.include_router(registration_dialog)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ aiogram-dialog
    setup_dialogs(dp)
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
        await database.close()
        await redis_client.aclose()


if __name__ == '__main__':
    asyncio.run(main())